#include <iostream>
using namespace std;

class BaseMatrix
{
protected:
    double** ptr;
    int height;
    int width;
public:
    BaseMatrix(int Height = 2, int Width = 2)
    {
        //конструктор
        height = Height;
        width = Width;
        ptr = new double* [height];
        for (int i = 0; i < height; i++)
            ptr[i] = new double[width];
    }

    //конструктор копий
    BaseMatrix(const BaseMatrix& M) {
        height = M.height;
        width = M.width;
        ptr = new double* [height];
        for (int i = 0; i < height; i++) {
            ptr[i] = new double[width];
            for (int j = 0; j < width; ++j) {
                ptr[i][j] = M.ptr[i][j];
            }
        }
    }

    BaseMatrix& operator=(BaseMatrix const& M) {
        if (height == M.height && width == M.width) {
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; ++j) {
                    ptr[i][j] = M.ptr[i][j];
                }
            }
        }
        return *this;
    }

    double* operator[](int index) {
        return ptr[index];
    }

    double& operator()(int index1, int index2) {
        return ptr[index1][index2];
    }
    
    BaseMatrix operator+() { // унарный = транспонирование
        BaseMatrix res(width, height);
        for (int i = 0; i < height; ++i) {
            for (int j = 0; j < width; ++j) {
                double t = ptr[i][j];
                res.ptr[i][j] = ptr[j][i];
                res.ptr[j][i] = t;
            }
        }
        return res;
    }
    
    BaseMatrix operator+(double d) {
        BaseMatrix res(width, height);
        if (height == width) {
            for (int i = 0; i < height; ++i) {
                ptr[i][i] += d;
            }
        }
        return res;
    }
    
    BaseMatrix operator+(BaseMatrix M) {
        BaseMatrix res(width, height);
        if (M.height == height && M.width == width) {
            for (int i = 0; i < height; ++i) {
                for (int j = 0; j < width; ++j) {
                    res.ptr[i][j] = ptr[i][j] + M.ptr[i][j];
                }
            }
        }
        return res;
    }

    ~BaseMatrix()
    {
        //деструктор
        if (ptr != NULL)
        {
            for (int i = 0; i < height; i++)
                delete[] ptr[i];
            delete[] ptr;
            ptr = NULL;
        }
    }

    void print()
    {
        //вывод
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
                cout << ptr[i][j] << " ";
            cout << "\n";
        }
    }

};


int main()
{
    BaseMatrix M;

    M.print();

    char c; cin >> c;

    return 0;
}

