// LinkedListInherit21.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
using namespace std;

#include <iostream>

template<class T>
class Element
{
    //protected:
public:
    //переместить в protected
    Element* next;
    Element* prev;
    T info;

    Element(T data)
    {
        next = prev = NULL;
        info = data;
    }

    Element(Element* Next, Element* Prev, T data)
    {
        next = Next;
        prev = Prev;
        info = data;
    }

    Element(const Element& el)
    {
        next = el.next;
        prev = el.prev;
        info = el.info;
    }

    template<class T1>
    friend ostream& operator<<(ostream& s, Element<T1>& el);

};

template<class T1>
ostream& operator<<(ostream& s, Element<T1>& el)
{
    s << el.info;
    return s;
}

template<class T>
class LinkedList
{
    //protected:
public:
    //переместить в protected
    Element<T>* head;
    Element<T>* tail;
    int count;

    LinkedList()
    {
        head = tail = NULL;
        count = 0;
    }

    //удалить первый/последний элемент и вернуть удаленное значение
    virtual Element<T>* pop() = 0;
    //добавить элемент в список
    virtual Element<T>* push(T value) = 0;
    //получить первый/последний элемент списка
    //virtual Element<T>* front(T value) = 0;
    //virtual Element<T>* back(T value) = 0;

    //доступ по индексу
    virtual Element<T>* operator[](int index) {
        return nullptr;
    }

    template<class T1>
    friend ostream& operator<<(ostream& s, LinkedList<T1>& el);

    virtual Element<T>* insert(T value, Element<T>* pred = NULL) {
        if (LinkedList<T>::head == NULL) {
            if (pred != NULL) {
                throw; //придумать
            }
            return push(value);
        }

        Element<T>* newElem = new Element<T>(value);
        if (pred == NULL) {
            newElem -> next = LinkedList<T>::head;
            LinkedList<T>::head = newElem;
        } else {
            newElem -> next = pred -> next;
            pred -> next = newElem;
        }
        LinkedList<T>::count++;
        return newElem;
    }

    virtual Element<T>* find(T value) {
        Element<T>* p = LinkedList<T>::head;
        while (p != NULL) {
            if (p -> info == value) {
                return p;
            }
            p = p -> next;
        }
        return NULL;
    }

    virtual Element<T>* find_r(T value) {
        return find_r(value, LinkedList<T>::head);
    }

    virtual Element<T>* find_r(T value, Element<T>* current) {
        if (current == NULL) return NULL;
        if (current -> info == value) return current;

        return find_r(value, current -> next);
    }

    virtual Element<T>* find_r(T key, int (*cmp)(T, T), Element<T>* current) {
        if (current == NULL) return NULL;
        if (cmp(current -> info, key) == 0) return current;

        return find_r(key, cmp, current -> next);
    }

    virtual Element<T>* find(int (*cmp)(T)) {
        Element<T>* current;
        for (current = LinkedList<T>::head; current != NULL; current = current -> next) {
            if (cmp(current->info) == 1) return current;
        }
        return NULL;
    }

    //доработать деструктор
    virtual ~LinkedList() {
        Element<T>* p = head;
        Element<T>* q = head;
        for(; p != NULL; p = p->next) {
            q = p->next;
            delete p;
        }

    }

    void filter(bool (*cmp)(T), LinkedList<T>* dest) {
        for (Element<T>* current = head; current != NULL; current = current->next) {
            if (cmp(current -> info)) dest->push(current->info);
        }
    }
};

template<class T1>
ostream& operator<<(ostream& s, LinkedList<T1>& el){
    s << "(";
    Element<T1>* p = el.head;
    while (p != NULL ) {
        s << p->info << ", ";
        p = p -> next;
    }
    s << ")";
    return s;
}

template<class T>
class Stack : public LinkedList<T> {
public:
    Stack() : LinkedList<T>() {}

    virtual Element<T>* operator[](int index) {
        if (LinkedList<T>::head == NULL) throw;
        if (index < 0 || index >= LinkedList<T>::count) throw;

        Element<T>* p = LinkedList<T>::head;
        while (index--) p = p -> next;
        return p;
    }


    virtual Element<T>* pop() {
        if (LinkedList<T>::head == NULL) return NULL;

        Element<T>* result = LinkedList<T>::tail;
        if (LinkedList<T>::head == LinkedList<T>::tail) {
            LinkedList<T>::tail = NULL;
            LinkedList<T>::head = NULL;
        } else {
            Element<T>* p = LinkedList<T>::head;
            while (p->next != LinkedList<T>::tail) {
                p = p -> next;
            }

            p -> next = NULL;
            LinkedList<T>::tail = p;
        }

        LinkedList<T>::count--;
        return result;
    }

    virtual Element<T>* push(T value) {
        if (LinkedList<T>::tail == NULL) {
            LinkedList<T>::tail = new Element<T>(value);
            LinkedList<T>::head = LinkedList<T>::tail;
        } else {
            Element<T>* newElem = new Element<T>(value);
            LinkedList<T>::tail -> next = newElem;
            LinkedList<T>::tail = LinkedList<T>::tail->next;
        }
        LinkedList<T>::count++;
        return LinkedList<T>::tail;
    }

    virtual ~Stack() {
        cout << "Stack destructor" << endl;
    }

};

class my_class
{
public:
	int data;
	int key;
	my_class() { key = 0; data = 1; cout << "\nmy_class default constructor"; }
	my_class(int k, int v = 0) { key = k;data = v; cout << "\nmy_class constructor";}

	~my_class() { cout << "\nmy_class destructor"; }

	friend ostream& operator<<(ostream& s, my_class& value);

};

ostream& operator<<(ostream& s, my_class& value)
{
	s <<value.key<<", "<< value.data;
	return s;
}

int compare(my_class m1, my_class m2) {
    if (m1.key == m2.key) return 0;
    return m1.key <= m2.key ? -1 : 1;
}

int even(my_class m) {
    return m.key % 2 == 0 ? 1 : 0;
}
int main() {
    DoubleSidedStack<my_clas> S; // его нет
    Stack<double> test;
    test.push(1);
    test.push(2);
    test.push(3);
    test.insert(2.5, test.head -> next);

    int (*cmp_ptr)(my_class);
    cmp_ptr = even;
    Element<my_class>* p = S.find(cmp_ptr);

    Element<double>* ptr = test.pop();
    cout << *ptr << endl;
    cout << test << endl;
    cout << test.find(2) << endl;


    return 0;
}

// // LinkedListInherit21.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
////
//using namespace std;
//
//#include <iostream>
//
//template<class T>
//class Element
//{
//	//protected:
//public:
//	//переместить в protected
//	Element* next;
//	Element* prev;
//	T info;
//
//	Element(T data)
//	{
//		next = prev = NULL;
//		info = data;
//	}
//
//	Element(Element* Next, Element* Prev, T data)
//	{
//		next = Next;
//		prev = Prev;
//		info = data;
//	}
//
//	Element(const Element& el)
//	{
//		next = el.next;
//		prev = el.prev;
//		info = el.info;
//	}
//
//	template<class T1>
//	friend ostream& operator<<(ostream& s, Element<T1>& el);
//
//};
//
//template<class T1>
//ostream& operator<<(ostream& s, Element<T1>& el)
//{
//	s << el.info;
//	return s;
//}
//
//template<class T>
//class LinkedList
//{
//	//protected:
//public:
//	//переместить в protected
//	Element<T>* head;
//	Element<T>* tail;
//	int count;
//
//	LinkedList()
//	{
//		head = tail = NULL;
//		count = 0;
//	}
//
//	LinkedList(T* arr, int len)
//	{
//		//...
//	}
//
//	virtual Element<T>* pop() = 0;
//	virtual Element<T>* push(T value) = 0;
//
//	T& operator[](int index)
//	{
//		//if(index<0 || index>=count) throw ?;
//
//		Element<T>* current = head;
//
//		for (int i = 0;
//			current != NULL && i < index;
//			current = current->next, i++);
//
//		return current->info;
//	}
//
//	virtual bool isEmpty() { return (LinkedList<T>::count == 0); }
//
//	template<class T1>
//	friend ostream& operator<<(ostream& s, LinkedList<T1>& el);
//
//	virtual ~LinkedList()
//	{
//		cout << "\nLinkedList class destructor";
//		if (head != NULL)
//		{
//			Element<T>* current = head;
//			Element<T>* temp = head->next;
//			for (; current != tail; current = temp, temp = temp->next)
//				delete current;
//		}
//		head = NULL; tail = NULL;
//	}
//};
//
//template<class T1>
//ostream& operator<<(ostream& s, LinkedList<T1>& el)
//{
//	Element<T1>* current;
//	for (current = el.head; current != NULL; current = current->next)
//		s << *current << "; ";
//	return s;
//}
//
//template<class T>
////template<class T, int N = 20>
//class Stack : public LinkedList<T>
//{
//public:
//	//Stack<T, N>() : LinkedList<T>()
//	Stack<T>() : LinkedList<T>()
//	{
//		/*if (N > 0)
//			for (int i = 0; i < N; i++)
//				push(0);*/
//	}
//
//	virtual Element<T>* push(T value)
//	{
//		if (LinkedList<T>::head == NULL) //if(count==0)
//		{
//			//пустой список
//			LinkedList<T>::tail = new Element<T>(value);
//			LinkedList<T>::head = LinkedList<T>::tail;
//		}
//		else
//		{
//			//элементы уже есть
//			LinkedList<T>::tail->next = new Element<T>(value);
//			//LinkedList<T>::tail->next->prev = LinkedList<T>::tail;
//			LinkedList<T>::tail = LinkedList<T>::tail->next;
//		}
//		LinkedList<T>::count++;
//		return LinkedList<T>::tail;
//	}
//
//	virtual Element<T>* pop()
//	{
//		//пустой список
//		if (LinkedList<T>::tail == NULL)
//			return NULL;
//		Element<T>* res = LinkedList<T>::tail;
//		//один элемент
//		if (LinkedList<T>::head == LinkedList<T>::tail)
//			LinkedList<T>::head = LinkedList<T>::tail = NULL;
//		else
//		{
//			Element<T>* current;
//			for (current = LinkedList<T>::head;
//				current->next != LinkedList<T>::tail; current = current->next);
//			LinkedList<T>::tail = current;
//			LinkedList<T>::tail->next = NULL;
//		}
//		LinkedList<T>::count--;
//		return res;
//	}
//
//	virtual Element<T>* insert(T value, Element<T>* predecessor=NULL)
//	{
//		if (LinkedList<T>::head == NULL)
//			return push(value); //if (predecessor != NULL) throw ...;
//		if (predecessor == NULL)
//		{
//			Element<T>* newElem = new Element<T>(value);
//			newElem->next = LinkedList<T>::head;
//			LinkedList<T>::head = newElem;
//			LinkedList<T>::count++;
//			return newElem;
//		}
//		Element<T>* newElem = new Element<T>(value);
//		Element<T>* successor = predecessor->next;
//		predecessor->next = newElem;
//		newElem->next = successor;
//		if (predecessor == LinkedList<T>::tail)
//			LinkedList<T>::tail = LinkedList<T>::tail->next;	//tail = newElem
//		LinkedList<T>::count++;
//		return newElem;
//	}
//
//	virtual ~Stack() { cout << "\nStack class destructor"; }
//};
//
//template<class T>
//class DoubleSidedStack : public Stack<T>
//{
//	//двусвязный список
//public:
//	DoubleSidedStack() : Stack<T>() { cout << "\nDoubleSidedStackclass constructor"; }
//	virtual ~DoubleSidedStack() { cout << "\nDoubleSidedStack class destructor"; }
//
//	virtual Element<T>* push(T value)
//	{
//		Element<T>* tail_predecessor_push = LinkedList<T>::tail;	//O(1)
//		Element<T>* res = Stack<T>::push(value);	//O(1)
//		res->prev = tail_predecessor_push;	//O(1)
//		return res; //O(1)
//	}
//
//	virtual Element<T>* pop()
//	{
//		/*Element<T>* res = Stack<T>::pop();
//		res->prev = NULL;
//		return res;*/
//
//		if (LinkedList<T>::tail == LinkedList<T>::head)
//			return Stack<T>::pop();
//		Element<T>* res = LinkedList<T>::tail;
//		LinkedList<T>::tail = LinkedList<T>::tail->prev;
//		LinkedList<T>::tail->next = NULL;
//		res->prev = NULL;
//		LinkedList<T>::count--;
//		return res;
//	}
//
//	virtual Element<T>* insert(T value, Element<T>* predecessor = NULL)
//	{
//		if (LinkedList<T>::head == NULL)
//			return push(value); //if (predecessor != NULL) throw ...;
//		if (predecessor == NULL)
//		{
//			Stack<T>::insert(value);
//			LinkedList<T>::head->next->prev = LinkedList<T>::head;
//			return LinkedList<T>::head;
//		}
//		Element<T>* successor = predecessor->next;
//		Element<T>* inserted = Stack<T>::insert(value, predecessor);
//		if(predecessor!= LinkedList<T>::tail) successor->prev = inserted;
//		inserted->prev = predecessor;
//		return inserted;
//	}
//
//	//template<class T1>
//	//friend ostream& operator<<(ostream& s, DoubleSidedStack<T1>& el);
//};
//
///*template<class T1>
//ostream& operator<<(ostream& s, DoubleSidedStack<T1>& el)
//{
//	Element<T1>* current;
//	for (current = el.tail; current != NULL; current = current->prev)
//		s << *current << "; ";
//	return s;
//}*/
//
//class my_class
//{
//public:
//	int data;
//	int key;
//	my_class() { key = 0; data = 1; cout << "\nmy_class default constructor"; }
//	my_class(int k, int v = 0) { key = k;data = v; cout << "\nmy_class constructor";}
//
//	~my_class() { cout << "\nmy_class destructor"; }
//
//	friend ostream& operator<<(ostream& s, my_class& value);
//
//};
//
//ostream& operator<<(ostream& s, my_class& value)
//{
//	s <<value.key<<", "<< value.data;
//	return s;
//}
//
//int main()
//{
//	/*if (true)
//	{
//		DoubleSidedStack<double> S;
//		cout << "\n";
//		for (int i = 0; i < 20; i++)
//		{
//			S.push(i);
//		}
//		//S.insert(-1);
//		S.insert(5.5, S.head->next->next->next->next->next);
//		cout <<"\n"<< S;
//		cout << "\n";
//	}*/
//	/*if (true)
//	{
//		Stack<double> S;
//		for (int i = 0; i < 10; i++)
//			S.push(i);
//		S.insert(3.5, S.head->next->next->next);
//		cout << S;
//		cout << "\n";
//		cout<<S.Find_R(5.5, S.head);
//	}*/
//	/*if (true)
//	{
//		cout << "Constant parameter\n";
//		Stack<int, 20> S;
//		cout << "\n";
//		cout << S;
//		cout << "\n";
//		for (int i = 0; i < 20; i ++)
//			S[i] = i;
//		cout << S;
//		cout << "\n";
//	}*/
//	/*if (true)
//	{
//		cout << "Only object\n";
//		Stack<int> S;
//		for (int i = 0; i < 100; i += 5)
//			S.push(i);
//		for (; !S.isEmpty(); cout << S.pop()->info << ", ");
//		cout << "\n";
//	}*/
//
//	/*if (true)
//	{
//		cout << "\nBase pointer 1\n";
//		LinkedList<int>* ptr = new DoubleSidedStack<int>;
//		for (int i = 1; i < 100; i += 5)
//			ptr->push(i);
//		cout << *ptr << "\n";
//		delete ptr;
//		//добавить виртуальные деструкторы
//	}*/
//
//	/*if (true)
//	{
//		cout << "\nBase pointer 2\n";
//		LinkedList<int>* ptr; Stack<int>* ptr2 = new Stack<int>; ptr = ptr2;
//		for (int i = 1; i < 100; i += 5)
//			ptr->push(i);
//		cout << *ptr << "\n";
//		delete ptr;
//		//добавить виртуальные деструкторы
//	}*/
//
//	/*if (true)
//	{
//		cout << "\nStack pointer\n";
//		Stack<int>* ptr = new Stack<int>;
//		for (int i = 2; i < 100; i += 5)
//			ptr->push(i);
//		cout << *ptr << "\n";
//		delete ptr;
//	}*/
//
//	/*if (true)
//	{
//		cout << "\nmy_class Stack test\n";
//		Stack<my_class> S;
//		cout << "\ncycle\n";
//		for (int i = 3; i < 100; i += 5)
//			S.push(my_class(i));
//		cout << S;
//	}*/
//	/*if (true)
//	{
//		cout << "\nmy_class* p1 = new my_class";
//		my_class* p1 = new my_class;
//		delete p1;
//	}*/
//	/*if (true)
//	{
//		cout << "\nmy_class* p1 = new my_class()";
//		my_class* p1 = new my_class();
//		delete p1;
//	}*/
//	/*if (true)
//	{
//		cout << "\nmy_class* p1 = new my_class[]";
//		my_class* p1 = new my_class[10];
//		delete[] p1;
//	}*/
//	char c; cin >> c;
//	return 0;
//}
//
//// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
//// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"
//
//// Советы по началу работы
////   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
////   2. В окне Team Explorer можно подключиться к системе управления версиями.
////   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
////   4. В окне "Список ошибок" можно просматривать ошибки.
////   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
////   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.